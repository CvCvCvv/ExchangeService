// <auto-generated />
using System;
using ExchangeService.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ExchangeService.Migrations
{
    [DbContext(typeof(ExchangeServiceContext))]
    partial class ExchangeServiceContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.DirectionExchangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DirectionsExchange");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.DirectionOperationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectionExchangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectionExchangeId");

                    b.ToTable("DirectionsOperation");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.ExchangeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("DirectionExchangeId")
                        .HasColumnType("uuid");

                    b.Property<string>("NameExecutor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DirectionExchangeId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.OperationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DirectionOperationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ExchangeId")
                        .HasColumnType("uuid");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DirectionOperationId");

                    b.HasIndex("ExchangeId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.DirectionOperationEntity", b =>
                {
                    b.HasOne("ExchangeService.Application.Domains.Abstractions.Entities.DirectionExchangeEntity", "DirectionExchange")
                        .WithMany("DirectionOperations")
                        .HasForeignKey("DirectionExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionExchange");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.ExchangeEntity", b =>
                {
                    b.HasOne("ExchangeService.Application.Domains.Abstractions.Entities.DirectionExchangeEntity", "DirectionExchange")
                        .WithMany("Exchanges")
                        .HasForeignKey("DirectionExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionExchange");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.OperationEntity", b =>
                {
                    b.HasOne("ExchangeService.Application.Domains.Abstractions.Entities.DirectionOperationEntity", "DirectionOperation")
                        .WithMany("Operations")
                        .HasForeignKey("DirectionOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExchangeService.Application.Domains.Abstractions.Entities.ExchangeEntity", "Exchange")
                        .WithMany("Operations")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DirectionOperation");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.DirectionExchangeEntity", b =>
                {
                    b.Navigation("DirectionOperations");

                    b.Navigation("Exchanges");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.DirectionOperationEntity", b =>
                {
                    b.Navigation("Operations");
                });

            modelBuilder.Entity("ExchangeService.Application.Domains.Abstractions.Entities.ExchangeEntity", b =>
                {
                    b.Navigation("Operations");
                });
#pragma warning restore 612, 618
        }
    }
}
